### YamlMime:Tutorial
title: <span data-ttu-id="38a11-101">Explorar C# 6 (Tutorial interactivo de C#)</span><span class="sxs-lookup"><span data-stu-id="38a11-101">Explore C# 6 - C# interactive C# tutorial</span></span>
metadata:
  title: 'Explorar C# 6: pruebe las nuevas características de C# 6 de forma interactiva, mediante el explorador'
  description: En este tutorial se usa el explorador para examinar C# 6 de forma interactiva. Se estudian los nuevos giros que se pueden usar con C# 6 y que permiten que el código sea más conciso y legible.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: b43400a0fdae338744c521cf7ddb2bfce79fc43c
  ms.sourcegitcommit: c4e9d05644c9cb89de5ce6002723de107ea2e2c4
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 05/19/2019
  ms.locfileid: "65881036"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="38a11-105">Este tutorial permite examinar C# 6 de forma interactiva, mediante el uso del explorador para escribir C# y ver los resultados de la compilación y la ejecución del código.</span><span class="sxs-lookup"><span data-stu-id="38a11-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="38a11-106">Contiene una serie de lecciones que modifican procedimientos antiguos de C# para usar características más recientes y concisas de C# 6.</span><span class="sxs-lookup"><span data-stu-id="38a11-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="38a11-107">El resto de este artículo proporciona información general de cada una de estas características, con un vínculo para examinar cada una.</span><span class="sxs-lookup"><span data-stu-id="38a11-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="38a11-108">Propiedades automáticas de solo lectura que habilitan tipos de solo lectura</span><span class="sxs-lookup"><span data-stu-id="38a11-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"38a11-109\">Dos mejoras en la sintaxis de las propiedades automáticas facilitan su uso en más ubicaciones: propiedades automáticas de solo lectura e inicializadores de propiedades automáticas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"38a11-110\">Observe este pequeño programa:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"38a11-111\">Entre en el modo de enfoque y copie el código anterior en la ventana interactiva de C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"38a11-112\">Luego, haga clic en *Ejecutar* para ver lo que hace el código.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"38a11-113\">`AllCaps` tiene el efecto secundario no deseado de modificar los valores de propiedad, además de devolver la cadena en mayúsculas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"38a11-114\">El autor de la clase `Person` intentaba que las cadenas de `FirstName` y `LastName` fueran de solo lectura.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"38a11-115\">Con C# 6, esa intención puede quedar más clara.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"38a11-116\">Quite `private set` de ambas propiedades para crear una propiedad automática de solo lectura.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"38a11-117\">Haga clic en *Ejecutar* para ver que el compilador detecta las dos ubicaciones donde las propiedades `FirstName` y `LastName` se cambian si no deben estar ahí.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"38a11-118\">Puede cambiar el método `AllCaps` por el código siguiente para corregir el error del compilador:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"38a11-119\">Con esta nueva sintaxis, el compilador se asegura de que las propiedades sean inmutables.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="38a11-120">Inicialización de campos de respaldo de propiedades automáticas</span><span class="sxs-lookup"><span data-stu-id="38a11-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"38a11-121\">La nueva sintaxis de C# 6 permite usar inicializadores para propiedades automáticas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"38a11-122\">Esto se vuelve más importante a medida que las clases incorporan nuevas funcionalidades.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"38a11-123\">Agregue una propiedad de segundo nombre y un nuevo constructor que tome tres cadenas a la clase `Person`:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"38a11-124\">La asignación en la propiedad `MiddleName` es un inicializador.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"38a11-125\">Inicializa el campo de respaldo generado por el compilador para el segundo nombre.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="38a11-126">Miembros con forma de expresión</span><span class="sxs-lookup"><span data-stu-id="38a11-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="38a11-127">Los miembros con forma de expresión proporcionan una sintaxis ligera para métodos ligeros.</span><span class="sxs-lookup"><span data-stu-id="38a11-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="38a11-128">La clase `Person` tiene dos magníficos candidatos.</span><span class="sxs-lookup"><span data-stu-id="38a11-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="38a11-129">Examine la declaración de `ToString`:</span><span class="sxs-lookup"><span data-stu-id="38a11-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="38a11-130">Reemplace la declaración de `ToString` por el siguiente código:</span><span class="sxs-lookup"><span data-stu-id="38a11-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="38a11-131">Intente lo mismo con el método `AllCaps`.</span><span class="sxs-lookup"><span data-stu-id="38a11-131">Try the same with the `AllCaps` method.</span></span> <span data-ttu-id="38a11-132">Esto supone una pequeña mejora, pero si se usa de forma sensata crea código mucho más legible, especialmente para objetos de transferencia de datos (DTO) y otros tipos con comportamiento mínimo.</span><span class="sxs-lookup"><span data-stu-id="38a11-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="38a11-133">Importación de una sola clase</span><span class="sxs-lookup"><span data-stu-id="38a11-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"38a11-134\">Si usa los métodos estáticos de una clase de forma repetida por el código, la inclusión del nombre de clase cada vez oscurece el significado del código.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-134\">If you repeatedly use one class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"38a11-135\">La clase `Person` actualmente importa el espacio de nombres `System`, aunque solo se use <xref:System.Console?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"38a11-136\">Modifique la instrucción `using` como se indica:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"38a11-137\">La instrucción `static using` es más útil en programas más grandes que usan mucho una sola clase con muchos métodos estáticos, como la clase [`string`](xref:System.String) o la clase <xref:System.Math?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="38a11-138">Un mejor formato de cadena</span><span class="sxs-lookup"><span data-stu-id="38a11-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"38a11-139\">C# 6 contiene nueva sintaxis para crear cadenas a partir de una cadena y expresiones insertadas que se evalúan para generar otros valores de cadena.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"38a11-140\">Puede cambiar los métodos `ToString` y `AllCaps` para usar esta sintaxis:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"38a11-141\">En lugar de argumentos posicionales entre `{` y `}`, se escriben directamente expresiones de C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"38a11-142\">Puede hacer lo mismo en el método `Main`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"38a11-143\">Reemplace el código existente por el siguiente:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"38a11-144\">No está limitado a una única variable en estas expresiones.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"38a11-145\">Vamos a comenzar con un nuevo ejemplo y a modificarlo para mostrar otras expresiones que se pueden usar con la interpolación de cadenas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"38a11-146\">Pegue el código siguiente en la ventana interactiva, en el método `Main`:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\n<span data-ttu-id=\"38a11-147\">Puede quitar la variable local `average` y realizar el cálculo como parte de la expresión de cadena interpolada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-147\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"38a11-148\">Reemplace las dos últimas líneas por lo siguiente:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-148\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"38a11-149\">Al ejecutar el ejemplo anterior, encontrará que la salida de `Average` tiene más posiciones decimales de las que querría.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-149\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"38a11-150\">La sintaxis de interpolación de cadena admite todas las cadenas de formato disponibles mediante el uso de los métodos de formato anteriores.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-150\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"38a11-151\">La cadena de formato se especifica entre las llaves.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-151\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"38a11-152\">Agregue un signo `:` después de la expresión a la que se va a dar formato:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-152\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="38a11-153">Comprobaciones NULL rápidas y sencillas</span><span class="sxs-lookup"><span data-stu-id="38a11-153">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"38a11-154\">El operador `?.` (condicional NULL) facilita la escritura de lógica que tiene en cuenta valores `null` sin problemas, sin comprobaciones `if` adicionales.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-154\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"38a11-155\">Para examinar la característica, comience por copiar el código siguiente en la ventana interactiva para probarlo:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-155\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"38a11-156\">Produce una excepción <xref:System.NullReferenceException> al ejecutar el ejemplo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-156\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"38a11-157\">Cambie el operador de acceso a miembros `.` por el **operador condicional NULL**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-157\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"38a11-158\">Después de este cambio, no hay salida.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-158\">After this change, there's no output.</span></span> <span data-ttu-id=\"38a11-159\">Esto se debe a que el resultado de `s?.Length` es `int?` cuando el resultado de `s.Length` es `int`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-159\">That's because the result of `s?.Length` is an `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"38a11-160\">En este ejemplo, `s?.Length` es `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-160\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"38a11-161\">`?.` devuelve `null` si el operando izquierdo es `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-161\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"38a11-162\">Si el tipo del operando derecho es un tipo de valor, el operador `?.` devuelve un tipo que acepta valores NULL para ese tipo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-162\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"38a11-163\">Además de `?.`, puede usar `?[]` para el acceso de matriz o indizador.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-163\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"38a11-164\">Pruebe el código siguiente en la ventana interactiva:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-164\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"38a11-165\">Se pueden combinar varios operadores condicionales en una sola expresión.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-165\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"38a11-166\">Un operando izquierdo `null` genera un resultado `null`, lo que permite evitar fácilmente cláusulas if anidadas para acceder a miembros de miembros.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-166\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"38a11-167\">Por ejemplo, pruebe el código siguiente en la ventana interactiva:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-167\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"38a11-168\">El ejemplo anterior se puede simplificar mediante el **operador de fusión NULL** para proporcionar un valor predeterminado:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-168\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"38a11-169\">El **operador condicional NULL** ayuda a escribir código que aclara la lógica principal a la vez que prueba sin problemas valores `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-169\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="38a11-170">Filtros de excepciones</span><span class="sxs-lookup"><span data-stu-id="38a11-170">Exception filters</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"38a11-171\">Los filtros de excepciones permiten detectar una excepción en función de alguna condición.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-171\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"38a11-172\">Un uso típico es crear un método de filtro que registre excepciones, pero que nunca las controle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-172\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"38a11-173\">Un filtro de excepciones es una expresión booleana que es `true` si se debe ejecutar la cláusula `catch` y `false` si cláusula `catch` no debe detectar la excepción.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-173\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"38a11-174\">Pruebe el código siguiente en la ventana interactiva: Registra el tipo de excepción y el mensaje en la consola.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-174\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"38a11-175\">Devuelve `false`, lo que indica que no se puede controlar la excepción.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-175\">It returns `false` which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"38a11-176\">Pruebe el programa en la ventana interactiva.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-176\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"38a11-177\">Debería ver el mensaje del método `LogException`, seguido por el mensaje de excepción predeterminado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-177\">You should see the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"38a11-178\">Solo para experimentar, cambie la instrucción `return false` por `return true` y vuelva a ejecutar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-178\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"38a11-179\">Ahora se detecta la excepción y se ejecuta el programa hasta su finalización.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-179\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"38a11-180\">Más allá de los escenarios de registro, los filtros de excepciones pueden ser más útiles cuando una propiedad de la excepción determina qué acción realizar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-180\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"38a11-181\">Por ejemplo, puede buscar en <xref:System.AggregateException> para ver cuáles son las excepciones incluidas y realizar alguna acción adecuada en función de la excepción concreta.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-181\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="38a11-182">Uso de nameof</span><span class="sxs-lookup"><span data-stu-id="38a11-182">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"38a11-183\">El operador `nameof` devuelve el nombre de cualquier variable o tipo, o bien un miembro de un tipo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-183\">The `nameof` operator returns the name of any variable, a type, or a type's member.</span></span> <span data-ttu-id=\"38a11-184\">Pruebe el código siguiente en la ventana interactiva para ver cómo funciona:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-184\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"38a11-185\">La salida coincide con el nombre de la variable o el tipo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-185\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"38a11-186\">Aunque haya proporcionado el nombre de tipo completo (como `System.String`), el operador `nameof` devuelve el nombre no completo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-186\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"38a11-187\">Esta característica resulta especialmente útil cuando es necesario convertir un nombre de parámetro o propiedad en una cadena.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-187\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"38a11-188\">Los ejemplos incluyen la captura del nombre de un argumento para producir una excepción <xref:System.ArgumentNullException> o <xref:System.ArgumentException>, o la captura del nombre de una propiedad modificada al implementar <xref:System.ComponentModel.INotifyPropertyChanged>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-188\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="38a11-189">Nueva sintaxis de inicialización de objetos</span><span class="sxs-lookup"><span data-stu-id="38a11-189">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"38a11-190\">La sintaxis de inicializador de objeto ahora admite la inicialización de *indizadores*, así como de propiedades y campos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-190\">Object initializer syntax now supports initializing *indexers* as well as properties and fields.</span></span> <span data-ttu-id=\"38a11-191\">Esta adición facilita la inicialización de diccionarios y otros tipos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-191\">This addition makes it easier to initialize dictionaries and other types.</span></span> <span data-ttu-id=\"38a11-192\">Comience por un diccionario.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-192\">Start with a dictionary.</span></span> <span data-ttu-id=\"38a11-193\">Ejecute el código siguiente en la ventana interactiva:</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-193\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"38a11-194\">Esta sintaxis, que establece un valor en un indizador, puede usarse para cualquier tipo que tenga un descriptor de acceso o un indizador accesible.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-194\">This syntax, which sets a value in an indexer, can be used for any type that has an accessible set accessor on an indexer.</span></span>\n\n<span data-ttu-id=\"38a11-195\">Un segundo cambio facilita la habilitación de la sintaxis de inicializador para tipos que representan secuencias.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-195\">A second change makes it easier to enable initializer syntax for types that represent sequences.</span></span> <span data-ttu-id=\"38a11-196\">Los inicializadores de colección se pueden usar en cualquier clase que implemente <xref:System.Collections.IEnumerable> y tenga un método `Add` accesible públicamente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-196\">Collection initializers can be used on any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span> <span data-ttu-id=\"38a11-197\">Ese método `Add` ahora puede ser un método de extensión.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-197\">That `Add` method can now be an extension method.</span></span> \n\n<span data-ttu-id=\"38a11-198\">El ejemplo siguiente muestra un escenario de esta sintaxis.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-198\">The following example shows one scenario for this syntax.</span></span> <span data-ttu-id=\"38a11-199\">Crea una clase `Path` que implementa `IEnumerable<Point3D>` y tiene un método para agregar puntos que toman tres argumentos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-199\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that take three arguments.</span></span> <span data-ttu-id=\"38a11-200\">La clase `Extensions` crea un método `Add` adicional para agregar un nuevo punto desde sus tres componentes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-200\">The `Extensions` class creates an additional `Add` method to add a new point from its three components.</span></span> <span data-ttu-id=\"38a11-201\">Este ejemplo de momento no se ejecuta de forma interactiva debido a restricciones en el entorno.</span><span class=\"sxs-lookup\"><span data-stu-id=\"38a11-201\">This sample does not currently run interactively due to restrictions in the environment.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="38a11-202">Ha terminado de examinar las nuevas características de C# 6.</span><span class="sxs-lookup"><span data-stu-id="38a11-202">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="38a11-203">Ahora pruébelas en sus aplicaciones.</span><span class="sxs-lookup"><span data-stu-id="38a11-203">Now try them yourself in your applications.</span></span>
