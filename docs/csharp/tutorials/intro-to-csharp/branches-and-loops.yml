### YamlMime:Tutorial
title: <span data-ttu-id="ddbe5-101">Obtenga información sobre la lógica condicional con instrucciones de rama y bucle</span><span class="sxs-lookup"><span data-stu-id="ddbe5-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: 'Ramas y bucles: tutorial interactivo de introducción a C#'
  description: En este tutorial sobre las bifurcaciones y los bucles, se usará el explorador para aprender a utilizar C# de forma interactiva. Va a escribir código de C# y vea los resultados de la compilación y la ejecución del código directamente en el explorador.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="ddbe5-105">Colección de listas</span><span class="sxs-lookup"><span data-stu-id="ddbe5-105">The list collection</span></span>
  ms.openlocfilehash: aa6e91af175d1d3a3dcad7086c3a8205d45f438a
  ms.sourcegitcommit: ca2ca60e6f5ea327f164be7ce26d9599e0f85fe4
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 05/06/2019
  ms.locfileid: "65063859"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="ddbe5-106">En este tutorial se enseña a escribir código que analiza variables y cambia la ruta de acceso de ejecución en función de dichas variables.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="ddbe5-107">Va a usar el explorador para escribir C# de forma interactiva y ver los resultados de la compilación y ejecución del código.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="ddbe5-108">Este tutorial contiene una serie de lecciones en las que se analizan las construcciones de bifurcaciones y bucles en C#.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="ddbe5-109">En ellas se enseñan los aspectos básicos del lenguaje C#.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="ddbe5-110">Toma de decisiones con la instrucción if</span><span class="sxs-lookup"><span data-stu-id="ddbe5-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="ddbe5-111">Ejecute el código siguiente en la ventana interactiva.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="ddbe5-112">Para ello, escriba el siguiente bloque de código en la ventana interactiva y haga clic en el botón **Ejecutar**:</span><span class="sxs-lookup"><span data-stu-id="ddbe5-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="ddbe5-113">Modifique la declaración de `b` para que el resultado de la suma sea menor que diez:</span><span class="sxs-lookup"><span data-stu-id="ddbe5-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="ddbe5-114">Vuelva a hacer clic en el botón **Ejecutar**.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-114">Click the **Run** button again.</span></span> <span data-ttu-id="ddbe5-115">Como la respuesta es menor que diez, no se imprime nada.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="ddbe5-116">La **condición** que está probando es false.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="ddbe5-117">No tiene ningún código para ejecutar porque solo ha escrito una de las bifurcaciones posibles para una instrucción `if`: la bifurcación true.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="ddbe5-118">Cuando explore C# o cualquier otro lenguaje de programación, cometerá errores al escribir código.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="ddbe5-119">El **compilador** buscará dichos errores y los notificará.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="ddbe5-120">Si la salida contiene mensajes de error, revise detenidamente el ejemplo de código y el código de la ventana interactiva para saber qué debe corregir.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="ddbe5-121">Este ejercicio le ayudará a aprender la estructura del código de C#.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="ddbe5-122">En este primer ejemplo se muestran la potencia de `if` y los tipos booleanos.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="ddbe5-123">Un *booleano* es una variable que puede tener uno de estos dos valores: `true` o `false`.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="ddbe5-124">C# define un tipo especial `bool` para las variables booleanas.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="ddbe5-125">La instrucción `if` comprueba el valor de `bool`.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="ddbe5-126">Cuando el valor es `true`, se ejecuta la instrucción que sigue a `if`.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="ddbe5-127">De lo contrario, se omite.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="ddbe5-128">Este proceso de comprobación de condiciones y ejecución de instrucciones en función de esas condiciones es muy eficaz.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="ddbe5-129">Indaguemos más.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ddbe5-130">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ddbe5-131">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ddbe5-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ddbe5-132">Operaciones conjuntas con if y else</span><span class="sxs-lookup"><span data-stu-id="ddbe5-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"ddbe5-133\">Para ejecutar un código distinto en las bifurcaciones true y false, cree una bifurcación `else` para que se ejecute cuando la condición sea false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"ddbe5-134\">Pruebe esto:</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"ddbe5-135\">La instrucción que sigue a la palabra clave `else` se ejecuta solo si la condición de prueba es `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"ddbe5-136\">La combinación de `if` y `else` con condiciones booleanas ofrece toda la eficacia necesaria.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"ddbe5-137\">La sangría debajo de las instrucciones `if` y `else` se utiliza para los lectores humanos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"ddbe5-138\">El lenguaje C# no considera significativos los espacios en blanco ni las sangrías.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"ddbe5-139\">La instrucción que sigue a la palabra clave `if` o `else` se ejecutará en función de la condición.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"ddbe5-140\">Todos los ejemplos de este tutorial siguen una práctica común para aplicar sangría a las líneas en función del flujo de control de las instrucciones.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"ddbe5-141\">Dado que la sangría no es significativa, debe usar `{` y `}` para indicar si desea que más de una instrucción forme parte del bloque que se ejecuta de forma condicional.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"ddbe5-142\">Los programadores de C# suelen usar esas llaves en todas las cláusulas `if` y `else`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"ddbe5-143\">El siguiente ejemplo es igual al que acaba de crear.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"ddbe5-144\">Pruébelo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"ddbe5-145\">En el resto de este tutorial, todos los ejemplos de código incluyen las llaves, según las prácticas aceptadas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"ddbe5-146\">Puede probar condiciones más complicadas:</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"ddbe5-147\">El símbolo `==` prueba la *igualdad*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"ddbe5-148\">Usar `==` permite distinguir la prueba de igualdad de la asignación, que verá en `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"ddbe5-149\">`&&` representa \"y\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"ddbe5-150\">Significa que ambas condiciones deben cumplirse para ejecutar la instrucción en la bifurcación true.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"ddbe5-151\">En estos ejemplos también se muestra que puede tener varias instrucciones en cada bifurcación condicional, siempre que las encierre entre `{` y `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"ddbe5-152\">También puede usar `||` para representar \"o\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"ddbe5-153\">Modifique los valores de `a`, `b` y `c` y cambie entre `&&` y `||` para explorar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"ddbe5-154\">Obtendrá más conocimientos sobre el funcionamiento de los operadores `&&` y `||`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"ddbe5-155\">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"ddbe5-156\">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"ddbe5-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="ddbe5-157">Uso de bucles para repetir las operaciones</span><span class="sxs-lookup"><span data-stu-id="ddbe5-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="ddbe5-158">El **bucle** es otro concepto importante para crear programas más grandes.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="ddbe5-159">Debe usar bucles para repetir las instrucciones que desee que se ejecuten más de una vez.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="ddbe5-160">Pruebe el código siguiente en la ventana interactiva:</span><span class="sxs-lookup"><span data-stu-id="ddbe5-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="ddbe5-161">La instrucción `while` comprueba una condición y ejecuta la instrucción que aparece después de `while`.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="ddbe5-162">La comprobación de la condición y la ejecución de dichas instrucciones se repetirán hasta que la condición sea false.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="ddbe5-163">En este ejemplo aparece otro operador nuevo.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-163">There's one other new operator in this example.</span></span> <span data-ttu-id="ddbe5-164">El código `++` que aparece después de la variable `counter` es el operador de **incremento**.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="ddbe5-165">Suma un valor de uno al valor del contador y almacena dicho valor en la variable del contador.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="ddbe5-166">Asegúrese de que la condición del bucle `while` no cambia a false mientras ejecuta el código.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="ddbe5-167">En caso contrario, se crea un **bucle infinito** donde nunca finaliza el programa.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="ddbe5-168">Eso no lo vamos a demostrar, porque el motor que ejecuta el código agotará el tiempo de espera y el programa no generará ninguna salida.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="ddbe5-169">El bucle `while` prueba la condición antes de ejecutar el código que sigue a `while`.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="ddbe5-170">El bucle `do` ... `while` primero ejecuta el código y después comprueba la condición.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="ddbe5-171">Tiene el siguiente aspecto:</span><span class="sxs-lookup"><span data-stu-id="ddbe5-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="ddbe5-172">Este bucle `do` y el bucle `while` anterior funcionan de la misma forma.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="ddbe5-173">Ahora vamos a pasar a una última instrucción del bucle.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ddbe5-174">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ddbe5-175">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ddbe5-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ddbe5-176">Operaciones con el bucle for</span><span class="sxs-lookup"><span data-stu-id="ddbe5-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="ddbe5-177">El bucle `for` es otra instrucción de bucle común que verá en el código de C#.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="ddbe5-178">Pruebe el código siguiente en la ventana interactiva:</span><span class="sxs-lookup"><span data-stu-id="ddbe5-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="ddbe5-179">Funciona de la misma forma que los bucles `while` y `do` que ya ha usado.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="ddbe5-180">La instrucción `for` consta de tres partes que controlan su funcionamiento.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="ddbe5-181">La primera parte es el **inicializador de for**: `int counter = 0;` declara que `counter` es la variable de bucle y establece su valor inicial en `0`.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="ddbe5-182">La parte central es la **condición de for**: `counter < 10` declara que este bucle `for` debe continuar ejecutándose mientras que el valor del contador sea menor que diez.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="ddbe5-183">La última parte es el **iterador de for**: `counter++` especifica cómo modificar la variable de bucle después de ejecutar el bloque que sigue a la instrucción `for`.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="ddbe5-184">En este caso, especifica que `counter` debe incrementarse en uno cada vez que el bloque se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="ddbe5-185">Experimente con estas partes por su cuenta.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-185">Experiment with these yourself.</span></span> <span data-ttu-id="ddbe5-186">Pruebe todos los pasos siguientes:</span><span class="sxs-lookup"><span data-stu-id="ddbe5-186">Try each of the following:</span></span>


    - <span data-ttu-id="ddbe5-187">Cambie el inicializador para que se inicie en un valor distinto.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="ddbe5-188">Cambie la condición para que se detenga en un valor diferente.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="ddbe5-189">Cuando haya terminado, escriba algo de código para practicar con lo que ha aprendido.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ddbe5-190">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ddbe5-191">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ddbe5-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ddbe5-192">Combinación de ramas y bucles</span><span class="sxs-lookup"><span data-stu-id="ddbe5-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="ddbe5-193">Ahora que ya ha obtenido la información sobre el bucle `if` y las construcciones de bucles con el lenguaje C#, trate de escribir código de C# para obtener la suma de todos los enteros de uno a veinte que se puedan dividir entre tres.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="ddbe5-194">Tenga en cuenta las siguientes sugerencias:</span><span class="sxs-lookup"><span data-stu-id="ddbe5-194">Here are a few hints:</span></span>


    - <span data-ttu-id="ddbe5-195">El operador `%` proporciona el resto de una operación de división.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="ddbe5-196">La instrucción `if` genera la condición para saber si un número debe formar parte de la suma.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="ddbe5-197">El bucle `for` puede facilitar la repetición de una serie de pasos para todos los números comprendidos entre el uno y el veinte.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="ddbe5-198">Pruébelo usted mismo.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-198">Try it yourself.</span></span> <span data-ttu-id="ddbe5-199">Después, revise cómo lo ha hecho.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-199">Then check how you did.</span></span> <span data-ttu-id="ddbe5-200">Sugerimos que obtenga 63 como respuesta.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="ddbe5-201">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ddbe5-202">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ddbe5-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ddbe5-203">Desafío completo</span><span class="sxs-lookup"><span data-stu-id="ddbe5-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="ddbe5-204">¿Ha obtenido algo parecido a lo siguiente?</span><span class="sxs-lookup"><span data-stu-id="ddbe5-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="ddbe5-205">Esta experiencia de codificación en línea se encuentra disponible actualmente en versión preliminar.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="ddbe5-206">Si tiene problemas, notifíquelos [en el repositorio de dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="ddbe5-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="ddbe5-207">¡Enhorabuena!</span><span class="sxs-lookup"><span data-stu-id="ddbe5-207">Congratulations!</span></span>
  content: >
    <span data-ttu-id="ddbe5-208">Ha completado el tutorial interactivo "Bifurcaciones y bucles".</span><span class="sxs-lookup"><span data-stu-id="ddbe5-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="ddbe5-209">Puede hacer clic en el vínculo **Colección de listas** que aparece a continuación para iniciar el siguiente tutorial interactivo. También puede visitar el [sitio .NET](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) para descargar el SDK de .NET Core, crear un proyecto en el equipo y seguir programando.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="ddbe5-210">El paso "Mantenimiento del aprendizaje" le lleva de vuelta a estos tutoriales.</span><span class="sxs-lookup"><span data-stu-id="ddbe5-210">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="ddbe5-211">Puede obtener más información sobre estos conceptos en los temas siguientes:</span><span class="sxs-lookup"><span data-stu-id="ddbe5-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="ddbe5-212">Instrucciones If y else</span><span class="sxs-lookup"><span data-stu-id="ddbe5-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="ddbe5-213">Instrucción while</span><span class="sxs-lookup"><span data-stu-id="ddbe5-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="ddbe5-214">Instrucción do</span><span class="sxs-lookup"><span data-stu-id="ddbe5-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="ddbe5-215">Instrucción for</span><span class="sxs-lookup"><span data-stu-id="ddbe5-215">For statement</span></span>](../../language-reference/keywords/for.md)
